{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","footerStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toString","Math","random","length","value","onChange","console","log","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd5935d1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note;","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject =>{\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport './index.css'\n\nconst Footer = () =>{\n    const footerStyle = {\n        color: 'green',\n        footerStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Departament of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('some error happened')\n\n    const hook = () => {\n        noteService.getAll()\n            .then(initialNotes => {\n            setNotes(initialNotes)\n        })\n    }\n\n    useEffect(hook, [])\n\n    //Notes filter\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1\n        }\n\n        noteService.create(noteObject).then(returnedNote =>{\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        })\n    }\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = {...note, important: !note.important}        \n\n        noteService.update(id, changedNote).then(returnedNote => {\n            setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error => {\n            setErrorMessage(\n                `the note '${note.content}' was already deleted from server`\n            )\n            setTimeout(() => {\n                setErrorMessage(null)\n            }, 5000);\n\n            setNotes(notes.filter(n => n.id !== id ))\n        })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage}/>\n            <div>\n                <button onClick={()=> setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) => \n                    <Note \n                        key={i} \n                        note={note} \n                        toggleImportance={() => toggleImportanceOf(note.id)} \n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">save</button>\n            </form>\n\n            <Footer/>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}